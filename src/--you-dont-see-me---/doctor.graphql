type AddressDTO {
  city: String
  fax: String
  id: String
  lat: Float
  lon: Float
  phone: String
  primary: Boolean
  state: String
  street: String
  street2: String
  uuid: String
  zip: String
}

input AddressDTOInput {
  city: String
  fax: String
  id: String
  lat: Float
  lon: Float
  phone: String
  primary: Boolean
  state: String
  street: String
  street2: String
  uuid: String
  zip: String
}

type AddressSearchResponseDTO {
  city: String
  fax: String
  lat: Float
  lon: Float
  phone: String
  primary: Boolean
  state: String
  street: String
  street2: String
  zip: String
}

type ApiResponse {
  message: String
}

type AverageRatingDTO {
  bedside: Float
  negotiate: Float
  npi: String
  overall: Float
  receipt: Float
  reviewCount: Int
  waitTime: Float
}

type CareRateDTO {
  averageProviderRate: Float
  careCategorySlug: String
  careUuid: String
  category: String
  costAfterSidecar: Float
  dosage: String
  marketRate: Float
  npi: String
  option: String
  providerRateFairness: String
  sidecarCode: String
  sidecarCovers: Float
  strength: String
  title: String
  uuid: String
  version: String
}

input CareRateEntryCreateDTOInput {
  createdByFirstName: String
  createdByLastName: String
  createdByUuid: String
  date: String
  expenseId: String
  expenseUuid: String
  npi: String
  providerRate: Float
  receiptId: String
  receiptUuid: String
  sidecarCode: String
  type: String
}

type CareRateEntryDTO {
  createdAt: String
  createdByFirstName: String
  createdByLastName: String
  createdByUuid: String
  date: String
  expenseId: String
  expenseUuid: String
  providerRate: Float
  sidecarCode: String
  type: String
  uuid: String
}

input CareRateEntryUpdateDTOInput {
  providerRate: Float
  sidecarCode: String
  uuid: String
}

type CareRateEntryUploadStatusDTO {
  message: String
  status: String
}

type CareRateSearchDTO {
  averageProviderRate: Float
  sidecarCode: String
}

type CustomPage_CareRateDTO_ {
  content: [CareRateDTO!]
  first: Boolean
  last: Boolean
  page: Int
  size: Int
  totalElements: String
  totalPages: Int
}

type CustomPage_CareRateEntryDTO_ {
  content: [CareRateEntryDTO!]
  first: Boolean
  last: Boolean
  page: Int
  size: Int
  totalElements: String
  totalPages: Int
}

type CustomPage_DoctorDTO_ {
  content: [DoctorDTO!]
  first: Boolean
  last: Boolean
  page: Int
  size: Int
  totalElements: String
  totalPages: Int
}

type CustomPage_DoctorPriceDTO_ {
  content: [DoctorPriceDTO!]
  first: Boolean
  last: Boolean
  page: Int
  size: Int
  totalElements: String
  totalPages: Int
}

type CustomPage_DoctorSearchDTO_ {
  content: [DoctorSearchDTO!]
  first: Boolean
  last: Boolean
  page: Int
  size: Int
  totalElements: String
  totalPages: Int
}

type CustomPage_DoctorSuggestDTO_ {
  content: [DoctorSuggestDTO!]
  first: Boolean
  last: Boolean
  page: Int
  size: Int
  totalElements: String
  totalPages: Int
}

type CustomPage_ReviewDTO_ {
  content: [ReviewDTO!]
  first: Boolean
  last: Boolean
  page: Int
  size: Int
  totalElements: String
  totalPages: Int
}

type CustomPage_SpecialtyDTO_ {
  content: [SpecialtyDTO!]
  first: Boolean
  last: Boolean
  page: Int
  size: Int
  totalElements: String
  totalPages: Int
}

type CustomPage_TaxonomyMapperDTO_ {
  content: [TaxonomyMapperDTO!]
  first: Boolean
  last: Boolean
  page: Int
  size: Int
  totalElements: String
  totalPages: Int
}

input DoctorCareRateDTOInput {
  adminFirstName: String
  adminLastName: String
  adminUuid: String
  prices: [DoctorPriceInput!]
}

type DoctorDTO {
  addresses: [AddressDTO!]
  affiliations: [DoctorDTO!]
  averageRatings: AverageRatingDTO
  bookmarked: Boolean
  careRates: [CareRateSearchDTO!]
  createdAt: String
  credential: String
  firstName: String
  gender: String
  languages: [String!]
  lastName: String
  licensedAt: String
  middleName: String
  npi: String
  organizationName: String
  organizationOtherNames: [OrganizationOtherNameDTO!]
  otherCredential: String
  otherFirstName: String
  otherLastName: String
  otherLastNameType: String
  otherMiddleName: String
  otherPrefix: String
  otherSuffix: String
  prefix: String
  priceFairness: String
  rating: Float
  reviewCount: Int
  reviews: [ReviewDTO!]
  source: String
  status: String
  suffix: String
  taxonomies: [TaxonomyDTO!]
  type: String
  updatedAt: String
}

input DoctorNpiDTOInput {
  npi: String
}

type DoctorPriceDTO {
  addOnCostAfterSidecar: Float
  addOnShouldCost: Float
  addOnSidecarRate: Float
  addresses: [AddressDTO!]
  affiliations: [DoctorDTO!]
  averageRatings: AverageRatingDTO
  bookmarked: Boolean
  careRates: [CareRateSearchDTO!]
  costAfterSidecar: Float
  createdAt: String
  credential: String
  firstName: String
  gender: String
  languages: [String!]
  lastName: String
  licensedAt: String
  middleName: String
  npi: String
  organizationName: String
  organizationOtherNames: [OrganizationOtherNameDTO!]
  otherCredential: String
  otherFirstName: String
  otherLastName: String
  otherLastNameType: String
  otherMiddleName: String
  otherPrefix: String
  otherSuffix: String
  prefix: String
  priceFairness: String
  providerRate: Float
  rating: Float
  reviewCount: Int
  reviews: [ReviewDTO!]
  shouldCost: Float
  sidecarRate: Float
  source: String
  status: String
  suffix: String
  taxonomies: [TaxonomyDTO!]
  type: String
  updatedAt: String
}

input DoctorPriceInput {
  careServiceId: String
  coverageId: String
  cpt: String
  expenseDate: String
  expenseId: String
  expenseUuid: String
  memberId: String
  memberUuid: String
  notes: String
  npi: String
  npiType: String
  price: Float
  receiptId: String
  receiptUuid: String
  sidecarCode: String
  zipcode: String
}

type DoctorSearchDTO {
  addresses: [AddressSearchResponseDTO!]
  careRates: [CareRateSearchDTO!]
  credential: String
  firstName: String
  gender: String
  languages: [String!]
  lastName: String
  middleName: String
  npi: String
  organizationName: String
  otherPrefix: String
  otherSuffix: String
  prefix: String
  priceFairness: String
  rating: Float
  reviewCount: String
  source: String
  suffix: String
  taxonomies: [TaxonomyDTO!]
  type: String
}

type DoctorSearchFiltersDTO {
  gender: [String!]
  languages: [String!]
  pricePoints: [String!]
  providerType: [String!]
}

type DoctorSuggestDTO {
  credential: String
  firstName: String
  gender: String
  lastName: String
  middleName: String
  npi: String
  organizationName: String
  prefix: String
  suffix: String
  type: String
}

type DoctorSuggestResponse {
  doctors: [DoctorSuggestDTO!]
  specialties: [SpecialtySuggestDTO!]
}

input DoctorUpdateDTOInput {
  addresses: [AddressDTOInput!]
  credential: String
  firstName: String
  gender: String
  languages: [String!]
  lastName: String
  licensedAt: String
  middleName: String
  npi: String
  organizationName: String
  organizationOtherNames: [OrganizationOtherNameDTOInput!]
  otherCredential: String
  otherFirstName: String
  otherLastName: String
  otherLastNameType: String
  otherMiddleName: String
  otherPrefix: String
  otherSuffix: String
  prefix: String
  source: String
  status: String
  suffix: String
  taxonomies: [TaxonomyUpdateDTOInput!]
  type: String
}

scalar JSON

type Mutation {
  """CacheNames=[DOCTOR_SEARCH_RESPONSE]"""
  removeMemberQuotesFromCacheUsingDELETE(cacheName: String!): ApiResponse!
  runCronJobsUsingPOST(action: String!, npi: String): JSON!
  updateDetailsUsingPUT(token: String!, doctor: DoctorUpdateDTOInput!): DoctorDTO!
  addRateEntriesFromExpensesUsingPOST(token: String!, careRateEntries: DoctorCareRateDTOInput!): JSON!
  updateRateEntryUsingPUT(token: String!, careRateEntry: CareRateEntryUpdateDTOInput!): CareRateEntryDTO!
  revokeRateEntriesFromExpensesUsingDELETE(token: String!, expenseId: String!): JSON!

  """
  <p>This endpoint takes a xlsx file that contains npi, type, sidecar code,
  price.</p><br><b>Upload file</b><ul><li>Must be a .csv or .xlsx
  file</li><li>Must have npi,type, sidecar code, and price headers in that
  order. </li></ul><p>status is set to processing when a file is
  uploaded.</p><br>
  """
  uploadCareRateEntryFileUsingPOST(token: String!, file: param_uploadCareRateEntryFileUsingPOST_fileInput!): CareRateEntryUploadStatusDTO!
  addBookmarkUsingPOST(token: String!, memberUuid: String!, npi: String!): DoctorDTO!
  removeBookmarkUsingDELETE(token: String!, memberUuid: String!, npi: String!): JSON!
  addAffiliationsUsingPOST(token: String!, npi: String!, doctors: [DoctorNpiDTOInput!]!): [DoctorDTO!]!
  removeAffiliationUsingDELETE(token: String!, npi: String!, affiliateNpi: String!): JSON!
  removeOrganizationOtherNameUsingDELETE(token: String!, npi: String!, organizationOtherNameUuid: String!): JSON!
  removeTaxonomyUsingDELETE(token: String!, npi: String!, taxonomyUuid: String!): JSON!
  addRateEntryUsingPOST(token: String!, careRate: CareRateEntryCreateDTOInput!): CareRateEntryDTO!
  removeRateEntryUsingDELETE(token: String!, uuid: String!): JSON!
  addReviewUsingPOST(token: String!, review: ReviewCreateDTOInput!): ReviewDTO!
  updateReviewUsingPUT(token: String!, review: ReviewUpdateDTOInput!): ReviewDTO!
  removeReviewUsingDELETE(token: String!, uuid: String!): JSON!
}

type OrganizationOtherNameDTO {
  name: String
  type: String
  uuid: String
}

input OrganizationOtherNameDTOInput {
  name: String
  type: String
  uuid: String
}

input param_uploadCareRateEntryFileUsingPOST_fileInput {
  unsupported: String
}

type Query {
  """CacheNames=[DOCTOR_SEARCH_RESPONSE]"""
  getCacheContentByCacheNameUsingGET(cacheName: String!): JSON!
  getSuggestionsUsingGET(token: String!, page: Int, size: Int, query: String!): CustomPage_DoctorSuggestDTO_!
  getRatesUsingGET(token: String!, page: Int, size: Int, npi: String!, query: String): CustomPage_CareRateDTO_!
  getBookmarksPerMemberUsingGET(token: String!, page: Int, size: Int, memberUuid: String!): CustomPage_DoctorDTO_!
  searchUsingGET(token: String!, page: Int, size: Int, type: String, gender: String, lat: Float, lon: Float, radius: Float, city: String, state: String, language: String, specialty: String, priceFairness: String, query: String): CustomPage_DoctorSearchDTO_!
  getSearchFiltersUsingGET(token: String!): DoctorSearchFiltersDTO!
  getSuggestionsUsingGET_1(token: String!, lat: Float, lon: Float, radius: Float, city: String, state: String, query: String!): DoctorSuggestResponse!
  getDetailsUsingGET(token: String!, npi: String!): DoctorDTO!
  getReviewPerMemberUsingGET(token: String!, memberUuid: String!, npi: String!): ReviewDTO!
  getRatesUsingGET_1(token: String!, page: Int, size: Int, npi: String!, memberUuid: String!, query: String): CustomPage_CareRateDTO_!
  getDoctorsPerCareUsingGET(token: String!, page: Int, size: Int, memberUuid: String!, sidecarCode: String!, specialties: [String!], lat: Float!, lon: Float!, radius: Float!, priceSort: String!): CustomPage_DoctorPriceDTO_!
  getRateEntriesUsingGET(token: String!, page: Int, size: Int, npi: String!, sidecarCode: String!): CustomPage_CareRateEntryDTO_!
  getReviewsPerDoctorUsingGET(token: String!, page: Int, size: Int, npi: String!): CustomPage_ReviewDTO_!
  getSpecialitiesUsingGET(token: String!, page: Int, size: Int): CustomPage_SpecialtyDTO_!
  getSpecialitiesUsingGET_1(token: String!, page: Int, size: Int): CustomPage_TaxonomyMapperDTO_!
  getSuggestionsUsingGET_2(token: String!, page: Int, size: Int, query: String): CustomPage_TaxonomyMapperDTO_!
  getViewedDoctorsPerMemberUsingGET(token: String!, page: Int, size: Int, memberUuid: String!): CustomPage_DoctorDTO_!
}

input ReviewCreateDTOInput {
  bedside: Float
  description: String
  memberUuid: String
  negotiate: Float
  npi: String
  overall: Float
  receipt: Float
  waitTime: Float
}

type ReviewDTO {
  bedside: Float
  description: String
  id: String
  memberUuid: String
  negotiate: Float
  overall: Float
  receipt: Float
  title: String
  updatedAt: String
  uuid: String
  waitTime: Float
}

input ReviewUpdateDTOInput {
  bedside: Float
  description: String
  negotiate: Float
  overall: Float
  receipt: Float
  uuid: String
  waitTime: Float
}

type SpecialtyDTO {
  icon: String
  id: String
  order: Int
  specialty: String
  uuid: String
}

type SpecialtySuggestDTO {
  icon: String
  order: Int
  specialty: String
  uuid: String
}

type TaxonomyDTO {
  code: String
  icon: String
  license: String
  primary: String
  specialty: String
  state: String
  title: String
  uuid: String
}

type TaxonomyMapperDTO {
  classification: String
  code: String
  grouping: String
  providerType: String
  specialty: String
  title: String
}

input TaxonomyUpdateDTOInput {
  code: String
  icon: String
  license: String
  primary: String
  specialty: String
  state: String
  title: String
  uuid: String
}

