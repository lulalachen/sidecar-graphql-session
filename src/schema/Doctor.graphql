type Query {
  # getDoctor(input: GetDoctorInput): Doctor
  getDoctorList(input: GetDoctorListInput): GetDoctorListResponse
}

type Mutation {
  # bookmarkDoctor(input: GetDoctorInput): BookmarkDoctorResponse
}

# --------- #

type Doctor {
  uuid: ID!
  firstName: String!
  lastName: String!
  addresses(input: DoctorAddressFilterInput): [Address]
}

# enum PriceFairness {
#   LOW
#   FAIR
#   HIGH
# }

type Address {
  street: String
  city: String
  state: String
  zip: String!
  lat: Float
  lon: Float
  primary: Boolean
}

type BookmarkDoctorResponse {
  isBookmarked: Boolean
  doctor: Doctor
}

type GetDoctorListResponse {
  page: Int
  size: Int
  content: [Doctor]
}

# --------- #

input GetDoctorInput {
  " uuid of doctor "
  uuid: ID!
}

input GetDoctorListInput {
  " filter by the name of doctor "
  name: String
  " filter by the price fairness of the doctor "
  priceFairness: PriceFairness
  " Member uuid "
  memberUuid: String!
}

input DoctorAddressFilterInput {
  isPrimary: Boolean
}
